let preprocessingNonBow=function(rdd,its){const numOfSentences=rdd.sentences.length,sentences=rdd.sentences,tokens=rdd.tokens,cache=rdd.cache,aptTokens=[],paraStarts=[0],aptPOS=["ADJ","ADV","NOUN","PROPN","VERB"];for(let i=0;i<numOfSentences;i+=1){const sen=[];for(let j=sentences[i][0];j<=sentences[i][1];j+=1)"tabCRLF"===its.type(j,tokens,cache)&&paraStarts.push(i),"word"===its.type(j,tokens,cache)&&!its.stopWordFlag(j,tokens,cache)&&aptPOS.includes(its.pos(j,tokens,cache))&&sen.push(its.normal(j,tokens,cache));aptTokens.push(sen)}return{aptTokens:aptTokens,paraStarts:paraStarts}},preprocessingBow=function(rdd,its,as){const numOfSentences=rdd.sentences.length,sentences=rdd.sentences,tokens=rdd.tokens,cache=rdd.cache,paraStarts=[0],aptPOS=["ADJ","ADV","NOUN","PROPN","VERB"];let para=[];for(let i=0;i<numOfSentences;i+=1){const sen=[];for(let j=sentences[i][0];j<=sentences[i][1];j+=1)"tabCRLF"===its.type(j,tokens,cache)&&paraStarts.push(i),"word"===its.type(j,tokens,cache)&&!its.stopWordFlag(j,tokens,cache)&&aptPOS.includes(its.pos(j,tokens,cache))&&sen.push(its.normal(j,tokens,cache));para.push(as.bow(sen))}return{bow:para,paraStarts:paraStarts}},bm25Bow=function(aptTokens,bm25,its){aptTokens.forEach((colToken=>bm25.learn(colToken)));const bow=[];for(let j=0;j<aptTokens.length;j+=1)bow.push(bm25.doc(j).out(its.bow));return bow},createGraphCommonTokens=function(para){const numOfSentences=para.length,senGraph=new Array(numOfSentences);for(let i=0;i<numOfSentences;i+=1)senGraph[i]=new Array(numOfSentences);for(let i=0;i<numOfSentences;i+=1){senGraph[i][i]=0;for(let j=i+1;j<numOfSentences;j+=1){const numOfCommonTokens=para[i].filter((token=>para[j].includes(token))).length;senGraph[i][j]=numOfCommonTokens/(Math.log(para[i].length)+Math.log(para[j].length)),Number.isFinite(senGraph[i][j])||(senGraph[i][j]=0),senGraph[j][i]=senGraph[i][j]}}return senGraph},createGraphCosine=function(paraBow,simmilarity){const numOfSentences=paraBow.length,senGraph=new Array(numOfSentences);for(let i=0;i<numOfSentences;i+=1)senGraph[i]=new Array(numOfSentences);for(let i=0;i<numOfSentences;i+=1){senGraph[i][i]=0;for(let j=i+1;j<numOfSentences;j+=1)senGraph[i][j]=simmilarity.bow.cosine(paraBow[i],paraBow[j]),Number.isFinite(senGraph[i][j])||(senGraph[i][j]=0),senGraph[j][i]=senGraph[i][j]}return senGraph},pagerankWithoutWeights=function(paraSenGraph){const numOfSentences=paraSenGraph.length,nonZero=[],ranks=[];for(let i=0;i<numOfSentences;i+=1)nonZero[i]=paraSenGraph[i].reduce((previousValue=>previousValue+1),0);for(let i=0;i<numOfSentences;i+=1){const s=paraSenGraph[i].reduce(((previousValue,currentValue,idx)=>previousValue+currentValue/nonZero[idx]),0);ranks.push({idx:i,val:s})}return ranks.sort(((a,b)=>b.val-a.val)),ranks},pagerankWithWeights=function(paraSenGraph){const numOfSentences=paraSenGraph.length,colSum=[],weights=[];let numOfConvergence=0;for(let i=0;i<numOfSentences;i+=1)colSum[i]=paraSenGraph[i].reduce(((previousValue,currentValue)=>previousValue+currentValue),0);for(let i=0;i<numOfSentences;i+=1)weights.push({idx:i,val:1/numOfSentences});for(let i=0;i<100;i+=1){for(let j=0;j<numOfSentences;j+=1){let rank=1-.85;rank+=.85*paraSenGraph[j].reduce(((previousValue,currentValue,idx)=>previousValue+currentValue/colSum[idx]*weights[idx].val),0),Math.abs(weights[j]-rank)<=1e-4&&(numOfConvergence+=1),weights[j].val=rank}if(numOfConvergence===numOfSentences)break}return weights.sort(((a,b)=>b.val-a.val)),weights},weightToPara=function(weights,paraStarts){const outer=[];let inner=[];for(let i=0;i<paraStarts.length-1;i+=1){for(let j=0;j<weights.length;j+=1)weights[j].idx>=paraStarts[i]&&weights[j].idx<paraStarts[i+1]&&inner.push(weights[j]);outer.push(inner),inner=[]}for(let i=0;i<weights.length;i+=1)weights[i].idx>=paraStarts[paraStarts.length-1]&&inner.push(weights[i]);return outer.push(inner),outer},summary=function(rdd,its,as,simmilarity,bm25){let weights=[];const summaryInfo={},textInfo=preprocessingNonBow(rdd,its),bow=bm25Bow(textInfo.aptTokens,bm25,its);return weights=pagerankWithWeights(createGraphCosine(bow,simmilarity)),summaryInfo.weights=weightToPara(weights,textInfo.paraStarts),summaryInfo.paraStarts=textInfo.paraStarts,summaryInfo};module.exports=summary;